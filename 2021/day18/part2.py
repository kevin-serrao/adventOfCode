from copy import deepcopy

def parseInput():
    with open('input.txt') as f:
        lines = [line.strip() for line in f.readlines()]
        f.close()
        return lines

def add(num1, num2):
    return [deepcopy(num1), deepcopy(num2)]

def shouldExplode(num):
    for n1 in num:
        if isinstance(n1, list):
            for n2 in n1:
                if isinstance(n2, list):
                    for n3 in n2:
                        if isinstance(n3, list):
                            for n4 in n3:
                                if isinstance(n4, list):
                                    return True
    return False

def addToBeginning(l, n):
    if isinstance(l[0], list):
        addToBeginning(l[0], n)
    else:
        l[0] += n

def addToEnd(l, n):
    if isinstance(l[1], list):
        addToEnd(l[1], n)
    else:
        l[1] += n


def explode(num):
    for i in range(len(num)):
        n1 = num[i]
        if isinstance(n1, list):
            for j in range(len(n1)):
                n2 = n1[j]
                if isinstance(n2, list):
                    for k in range(len(n2)):
                        n3 = n2[k]
                        if isinstance(n3, list):
                            for l in range(len(n3)):
                                n4 = n3[l]
                                if isinstance(n4, list):
                                    n3[l] = 0
                                    if l == 1:
                                        if isinstance(n3[0], list):
                                            addToEnd(n3[0], n4[0])
                                        else:
                                            n3[0] += n4[0]
                                    elif k == 1:
                                        if isinstance(n2[0], list):
                                            addToEnd(n2[0], n4[0])
                                        else:
                                            n2[0] += n4[0]
                                    elif j == 1:
                                        if isinstance(n1[0], list):
                                            addToEnd(n1[0], n4[0])
                                        else:
                                            n1[0] += n4[0]
                                    elif i == 1:
                                        if isinstance(num[0], list):
                                            addToEnd(num[0], n4[0])
                                        else:
                                            num[0] += n4[0]
                                    if l == 0:
                                        if isinstance(n3[1], list):
                                            addToBeginning(n3[1], n4[1])
                                        else:
                                            n3[1] += n4[1]
                                    elif k == 0:
                                        if isinstance(n2[1], list):
                                            addToBeginning(n2[1], n4[1])
                                        else:
                                            n2[1] += n4[1]
                                    elif j == 0:
                                        if isinstance(n1[1], list):
                                            addToBeginning(n1[1], n4[1])
                                        else:
                                            n1[1] += n4[1]
                                    elif i == 0:
                                        if isinstance(num[1], list):
                                            addToBeginning(num[1], n4[1])
                                        else:
                                            num[1] += n4[1]

def shouldSplit(num):
    for n1 in num:
        if isinstance(n1, list):
            for n2 in n1:
                if isinstance(n2, list):
                    for n3 in n2:
                        if isinstance(n3, list):
                            for n4 in n3:
                                if isinstance(n4, list):
                                    return False
                                elif n4 > 9:
                                    return True
                        elif n3 > 9:
                            return True
                elif n2 > 9:
                    return True
        elif n1 > 9:
            return True
    return False

def split(num):
    for i in range(len(num)):
        n1 = num[i]
        if isinstance(n1, list):
            for j in range(len(n1)):
                n2 = n1[j]
                if isinstance(n2, list):
                    for k in range(len(n2)):
                        n3 = n2[k]
                        if isinstance(n3, list):
                            for l in range(len(n3)):
                                n4 = n3[l]
                                if isinstance(n4, list):
                                    continue
                                elif n4 > 9:
                                    if n4 % 2 == 1:
                                        n3[l] = [n4 // 2, n4 // 2 + 1]
                                    else:
                                        n3[l] = [n4 // 2, n4 // 2]
                                    return
                        elif n3 > 9:
                            if n3 % 2 == 1:
                                n2[k] = [n3 // 2, n3 // 2 + 1]
                            else:
                                n2[k] = [n3 // 2, n3 // 2]
                            return
                elif n2 > 9:
                    if n2 % 2 == 1:
                        n1[j] = [n2 // 2, n2 // 2 + 1]
                    else:
                        n1[j] = [n2 // 2, n2 // 2]
                    return
        elif n1 > 9:
            if n1 % 2 == 1:
                num[i] = [n1 // 2, n1 // 2 + 1]
            else:
                num[i] = [n1 // 2, n1 // 2]
            return

def magnitude(num):
    if isinstance(num, list):
        return 3*magnitude(num[0]) + 2*magnitude(num[1])
    else:
        return num

def main():
    numbers = [[[[[4,9],[1,7]],[9,8]],[[7,9],[7,9]]],
[[[1,[1,5]],9],[[[8,0],[8,8]],[[7,2],[4,6]]]],
[[3,7],[[7,[4,6]],[[8,0],[7,8]]]],
[[[[0,1],2],4],[[9,[2,8]],7]],
[[[[9,0],9],7],[[1,0],8]],
[[4,[[1,2],1]],1],
[[[[6,1],[0,2]],[[2,3],4]],[[9,1],8]],
[[[5,9],[1,0]],[[7,0],3]],
[[9,1],[[4,7],[5,[8,6]]]],
[[5,[[3,2],[1,9]]],[[[3,8],9],3]],
[[0,[[5,6],2]],9],
[6,[2,[[4,2],6]]],
[[[[8,2],[9,1]],[9,1]],7],
[9,1],
[[[[9,8],[5,3]],5],[[6,9],[9,[6,8]]]],
[0,[[2,[2,5]],2]],
[[2,6],[[[2,8],1],[[0,2],[0,7]]]],
[[[[7,8],[8,5]],[[3,2],[4,0]]],[2,[[1,0],[2,6]]]],
[[[7,[7,0]],[[1,9],9]],7],
[[[[5,1],[0,9]],4],[[0,[9,7]],[8,[6,8]]]],
[[8,2],[2,[6,0]]],
[[2,6],[[[4,0],6],2]],
[[9,[7,[0,1]]],8],
[[[[3,8],[4,3]],[7,[0,6]]],[[[5,5],[0,4]],[[8,2],0]]],
[[[[9,1],[9,3]],[1,[0,1]]],[[[9,6],8],[9,6]]],
[[[[2,3],[7,1]],[[6,8],6]],[[[6,0],0],0]],
[[7,[[5,0],4]],[[[8,8],[6,2]],[8,2]]],
[[[0,[3,8]],[[0,0],[6,1]]],[[4,5],[[3,9],[5,8]]]],
[4,[[1,[9,6]],[8,2]]],
[[9,[[9,2],3]],[[[5,6],2],[1,[0,9]]]],
[[9,9],[[0,[9,6]],[[8,6],3]]],
[[4,[[8,3],2]],[[[9,9],9],[2,[2,0]]]],
[[[[7,3],[4,2]],7],[4,6]],
[[[2,6],[[4,0],[0,8]]],[[5,0],[3,5]]],
[[[[9,3],[0,3]],[[0,0],[1,1]]],[3,[[8,4],[8,6]]]],
[[[[3,6],8],1],[[4,[4,1]],[[5,1],[3,0]]]],
[[[[8,1],[2,0]],[5,[2,1]]],[[9,[0,0]],[[7,2],[1,0]]]],
[[[6,6],[2,3]],[[7,6],[[9,8],2]]],
[[[0,9],3],[[[9,5],5],[[6,8],[0,4]]]],
[[[0,3],9],[5,[5,[0,5]]]],
[[0,[[9,1],4]],[2,4]],
[[[9,7],[0,[7,8]]],[[[3,3],5],[[0,9],[1,5]]]],
[[0,[[8,0],[5,2]]],[[[1,8],[1,2]],[3,8]]],
[5,[0,[[9,8],9]]],
[[6,[[9,2],[3,5]]],[[[2,3],9],3]],
[1,[1,1]],
[[6,[[0,0],1]],[[7,[4,9]],7]],
[[3,[[3,5],3]],[[[9,9],6],[[5,0],8]]],
[1,5],
[[0,4],[8,7]],
[[7,[[9,2],1]],5],
[[[[6,8],[6,5]],0],4],
[[[4,1],[9,0]],[[[4,3],6],[5,9]]],
[[8,[[1,9],[5,4]]],[[[9,0],4],[5,5]]],
[[0,9],[[[5,5],[7,7]],6]],
[[8,[8,5]],[8,[2,6]]],
[[[[8,4],4],0],[[3,[2,6]],[6,6]]],
[[5,[[5,2],6]],[[[2,3],[5,0]],[[2,9],0]]],
[[[[5,9],6],[[8,9],[5,7]]],[0,[8,[2,5]]]],
[[[[9,0],7],1],2],
[[[9,3],6],[[[6,6],[9,6]],1]],
[[[2,0],[0,[4,6]]],[[[5,7],6],[9,5]]],
[[[3,[4,3]],8],[[[6,3],[0,5]],2]],
[[[[2,8],8],[5,[2,4]]],[[3,7],[2,1]]],
[[1,[[2,7],4]],7],
[[2,[4,[5,9]]],[[[7,0],6],[4,[9,1]]]],
[[[9,[3,5]],[[9,5],[5,2]]],[[2,[4,3]],[[0,5],[1,9]]]],
[[1,[9,0]],[[[0,9],[9,3]],0]],
[[[[7,8],[3,6]],3],[[[2,6],[2,9]],[[1,3],[1,3]]]],
[[[7,[1,4]],[4,7]],[[[0,7],[0,6]],5]],
[[[6,0],[3,[2,3]]],6],
[[0,[3,[1,3]]],[[2,3],9]],
[[[8,6],[0,2]],[[[8,9],[7,0]],9]],
[[[[4,9],6],2],[[[8,9],[1,5]],[9,3]]],
[[[1,5],[6,[2,7]]],[7,[1,7]]],
[5,[3,[9,1]]],
[[[7,5],[1,5]],1],
[2,[[[5,0],[4,0]],[[3,7],5]]],
[[[5,9],1],[[[3,9],4],6]],
[[3,[[5,2],[9,2]]],[4,[[3,6],[8,9]]]],
[[[5,4],[8,8]],1],
[[[[8,9],[5,8]],0],[[9,5],[6,[7,1]]]],
[[[4,[8,8]],[[9,5],4]],3],
[[6,[6,[4,3]]],[[7,[3,9]],[4,8]]],
[[5,[[4,2],[7,3]]],[[[9,0],[0,1]],[[5,8],0]]],
[[[[6,1],6],[9,[0,8]]],[9,9]],
[[4,0],[[[1,4],4],[4,4]]],
[[7,[[0,0],[1,6]]],7],
[[6,3],[5,[[2,7],5]]],
[[1,[7,5]],[0,[4,1]]],
[[[3,7],3],[[3,[0,2]],2]],
[[[0,8],[[7,0],[9,8]]],[[[0,3],4],[[6,0],6]]],
[[[[4,6],[1,7]],[[6,4],[1,5]]],[3,[9,9]]],
[[[2,[1,7]],[9,9]],[[0,[7,8]],[0,[9,6]]]],
[[9,8],[5,[6,[1,8]]]],
[[[7,2],[[0,6],[2,6]]],[[9,[0,4]],[9,[5,8]]]],
[[[8,[6,8]],[[5,5],[9,9]]],[[[2,0],6],[8,1]]],
[[[[0,8],4],[3,4]],[[0,[0,8]],[[7,5],2]]],
[7,[[[3,4],[5,4]],8]],
[[[2,8],[0,2]],6]]
    print(numbers[0])
    max_mag = 0
    for i in range(len(numbers)):
        for j in range(len(numbers)):
            if i != j:
                sum = add(numbers[i], numbers[j])
                while shouldExplode(sum) or shouldSplit(sum):
                    explode(sum)
                    split(sum)
                if magnitude(sum) > max_mag:
                    print(numbers[i])
                    print(numbers[j])
                    print
                    max_mag = magnitude(sum)
    print(max_mag)



    
main()